apply plugin: 'maven'

def libVersion
def libArtifactId
def libGroupId = 'cn.daily.android'
def libDescription = 'lib'

task readProperty() {
    File file = project.file("publish.properties")
    if (!file.exists()) {
        file.createNewFile()
        Writer writer = file.newWriter()
        writer.writeLine("groupId=cn.daily.android")
        writer.writeLine("artifactId=" + project.name)
        writer.writeLine("version=0.0.1-SNAPSHOT")
        writer.writeLine("description=默认描述,请根据情况修改相应字段")
        writer.close();
        throw new FileNotFoundException("请修改" + file.getPath() + "\n中的默认信息!\n注意只提醒一次，否则使用默认!");
    }

    Properties properties = new Properties()
    InputStream inputStream = file.newInputStream()
    properties.load(inputStream)
    libVersion = properties.getProperty("version")
    libArtifactId = properties.getProperty("artifactId")
    libGroupId = properties.getProperty("groupId")
    libDescription = properties.getProperty("description")
    inputStream.close()
}

//上传AAR、source、JavaDoc脚本
uploadArchives {
    repositories {
        //配置仓库地址和模块相关信息
        mavenDeployer {
            snapshotRepository(url: 'http://10.100.62.98:8086/nexus/content/repositories/snapshots') {
                authentication(userName: 'deployment', password: 'deployment123')
            }
            repository(url: 'http://10.100.62.98:8086/nexus/content/repositories/releases') {
                authentication(userName: 'deployment', password: 'deployment123')
            }
            pom.project {
                version libVersion
                artifactId libArtifactId
                groupId libGroupId
                description libDescription
                packaging 'aar'
            }
        }

        //创建源文件任务
        task androidSourcesJar(type: Jar) {
            archiveClassifier.set("sources")
            from android.sourceSets.main.java.srcDirs
        }

        //上传文件
        artifacts {
            archives androidSourcesJar
        }
    }
}.doLast {
    if (!libVersion.endsWith("-SNAPSHOT")) {
        exec {
            commandLine 'git', 'tag', 'v' + libVersion, '-m', 'create tag ' + libVersion
        }
    }
}.doLast {
    if (!libVersion.endsWith("-SNAPSHOT")) {
        exec {
            commandLine 'git', 'push', 'origin', 'v' + libVersion
        }
    }
}